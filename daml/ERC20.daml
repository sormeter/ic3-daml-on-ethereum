daml 1.2 module ERC20 where

sumBalances : [(Party, Int)] -> Int
sumBalances bList =
  foldl (\(acc : Int) (b : (Party, Int)) -> acc + (snd b)) 0 bList

lookupBalance : Party -> [(Party, Int)] -> Int
lookupBalance p bList =
  case bList of
    [] -> 0
    (owner, balance) :: bListRest -> if owner == p then balance else lookupBalance p bListRest

setBalance : Party -> Int -> [(Party, Int)] -> [(Party, Int)]
setBalance p value bList =
  case bList of
    [] -> [(p, value)]
    (owner, balance) :: bListRest ->
      if owner == p
        then (p, value) :: bListRest
        else (owner, balance) :: setBalance p value bListRest

addTo : Party -> Int -> [(Party, Int)] -> [(Party, Int)]
addTo p value bList =
  case bList of
    [] -> [(p, value)]
    (owner, balance) :: bListRest ->
      if owner == p
        then (p, (balance + value)) :: bListRest
        else (owner, balance) :: addTo p value bListRest

removeFrom : Party -> Int -> [(Party, Int)] -> [(Party, Int)]
removeFrom p value bList =
  case bList of
    [] -> [] -- Error
    (owner, balance) :: bListRest ->
      if owner == p
        then if balance >= value
          then (p, (balance - value)) :: bListRest
          else [] -- Error
        else (owner, balance) :: (removeFrom p value bListRest)

transfer : Party -> Party -> Int -> [(Party, Int)] -> [(Party, Int)]
transfer from to value bList =
  addTo to value (removeFrom from value bList)

lookupAllowance : Party -> Party -> [(Party, [(Party, Int)])] -> Int
lookupAllowance owner spender allowances =
  case allowances of
    [] -> 0
    (nextOwner, allows) :: restAllows ->
      if nextOwner == owner then lookupBalance spender allows else lookupAllowance owner spender restAllows

setAllowance : Party -> Party -> Int -> [(Party, [(Party, Int)])] -> [(Party, [(Party, Int)])]
setAllowance owner spender value allowances =
  case allowances of
    [] -> [(owner, [(spender, value)])]
    (nextOwner, allows) :: restAllows ->
      if nextOwner == owner
        then (nextOwner, setBalance spender value allows) :: restAllows
        else (nextOwner, allows) :: (setAllowance owner spender value restAllows)


template ERC20
  with
    name : Text
    issuer : Party
    users: [Party]
    -- Record to the total supply to use as a sanity-check to make sure
    -- that we don't create or destroy tokens whild transferring
    totalSupply : Int
    balances : [(Party, Int)]
    allowances : [(Party, [(Party, Int)])]
  where
    signatory issuer
    observer users
    
    agreement "ERC20 Token"

    ensure totalSupply == sumBalances balances

    nonconsuming choice Name : Text
      with
        caller : Party
      controller caller
        do
          return name
    
    nonconsuming choice TotalSupply : Int
      with
        caller : Party
      controller caller
        do
          return totalSupply
    
    nonconsuming choice BalanceOf : Int
      with
        caller : Party
        party : Party
      controller caller
        do
          return (lookupBalance party balances)
    
    nonconsuming choice Allowance : Int
      with
        caller : Party
        owner : Party
        spender : Party
      controller caller
        do
          return (lookupAllowance owner spender allowances)
    
    choice Transfer : ContractId ERC20
      with
        owner : Party
        receiver : Party
        value : Int
      controller owner
        do
          assert (value >= 0)
          assert (value <= lookupBalance owner balances)
          create this with
            balances = (transfer owner receiver value balances)

    choice TransferFrom : ContractId ERC20
      with
        spender : Party
        owner : Party
        receiver : Party
        value : Int
      controller spender
        do
          let
            allowance = (lookupAllowance owner spender allowances)
          assert (value >= 0)
          assert (value <= lookupBalance owner balances)
          assert (value <= allowance)
          create this with
            balances = (transfer owner receiver value balances)
            allowances = (setAllowance spender owner (allowance - value) allowances)

    choice Approve : ContractId ERC20
      with
        owner : Party
        spender : Party
        value : Int
      controller owner
        do
          assert (value >= 0)
          create this with
            allowances = (setAllowance spender owner value allowances)
    
    choice RegisterUser : ContractId ERC20
      with
        caller : Party
        newUser : Party
      controller caller
        do
          create this with
            users = newUser :: users

    -- choice Issue : ContractId ERC20
    --   with
    --     recipient : Party
    --     value : Int
    --   controller issuer
    --     do
    --       assert (value >= 0)
    --       create this with
    --         totalSupply = totalSupply + value
    --         balances = (addTo recipient value balances)

    -- choice Destroy : ContractId ERC20
    --   with
    --     amount : Int
    --   controller issuer
    --     do
    --       assert (amount >= 0)
    --       assert (amount <= lookupBalance issuer balances)
    --       create this with
    --         totalSupply = totalSupply - amount
    --         balances = (removeFrom issuer amount balances)
