daml 1.2 module ERC20 where

data Balance = Balance {owner : Party, balance : Int}
  deriving (Eq, Show)

sumBalances : [Balance] -> Int
sumBalances bList =
  foldl (\(acc : Int) (b : Balance) -> acc + b.balance) 0 bList

lookupBalance : Party -> [Balance] -> Int
lookupBalance p bList =
  case bList of
    [] -> 0
    b :: bListRest -> if b.owner == p then b.balance else lookupBalance p bListRest

setBalance : Party -> Int -> [Balance] -> [Balance]
setBalance p value bList =
  case bList of
    [] -> [Balance p value]
    b :: bListRest ->
      if b.owner == p
        then (Balance p value) :: bListRest
        else b :: setBalance p value bListRest

addTo : Party -> Int -> [Balance] -> [Balance]
addTo p value bList =
  case bList of
    [] -> [Balance p value]
    b :: bListRest ->
      if b.owner == p
        then (Balance p (b.balance + value)) :: bListRest
        else b :: addTo p value bListRest

removeFrom : Party -> Int -> [Balance] -> [Balance]
removeFrom p value bList =
  case bList of
    [] -> [] -- Error
    b :: bListRest ->
      if b.owner == p
        then if b.balance >= value
          then (Balance p (b.balance - value)) :: bListRest
          else [] -- Error
        else b :: (removeFrom p value bListRest)

transfer : Party -> Party -> Int -> [Balance] -> [Balance]
transfer from to value bList =
  addTo to value (removeFrom from value bList)

lookupAllowance : Party -> Party -> [(Party, [Balance])] -> Int
lookupAllowance owner spender allowances =
  case allowances of
    [] -> 0
    (nextOwner, allows) :: restAllows ->
      if nextOwner == owner then lookupBalance spender allows else lookupAllowance owner spender restAllows

setAllowance : Party -> Party -> Int -> [(Party, [Balance])] -> [(Party, [Balance])]
setAllowance owner spender value allowances =
  case allowances of
    [] -> [(owner, [Balance spender value])]
    (nextOwner, allows) :: restAllows ->
      if nextOwner == owner
        then (nextOwner, setBalance spender value allows) :: restAllows
        else (nextOwner, allows) :: (setAllowance owner spender value restAllows)


template ERC20
  with
    name : Text
    creator : Party
    owners: [Party]
    -- Record to the total supply to use as a sanity-check to make sure
    -- that we don't create or destroy tokens whild transferring
    totalSupply : Int
    balances : [Balance]
    allowances : [(Party, [Balance])]
  where
    signatory creator
    observer owners
    
    agreement "ERC20 Token"

    -- ensure totalSupply == sumBalances balances

    nonconsuming choice Name : Text
      with
        caller : Party
      controller caller
        do
          return name
    
    nonconsuming choice TotalSupply : Int
      with
        caller : Party
      controller caller
        do
          return totalSupply
    
    nonconsuming choice BalanceOf : Int
      with
        caller : Party
        party : Party
      controller caller
        do
          return (lookupBalance party balances)
    
    nonconsuming choice Allowance : Int
      with
        caller : Party
        owner : Party
        spender : Party
      controller caller
        do
          return (lookupAllowance owner spender allowances)
    
    choice Transfer : ContractId ERC20
      with
        owner : Party
        receiver : Party
        value : Int
      controller owner
        do
          assert (value >= 0)
          assert (value <= lookupBalance owner balances)
          create this with
            name = name
            creator = creator
            totalSupply = totalSupply
            balances = (transfer owner receiver value balances)
            allowances = allowances

    choice TransferFrom : ContractId ERC20
      with
        spender : Party
        owner : Party
        receiver : Party
        value : Int
      controller spender
        do
          let
            allowance = (lookupAllowance owner spender allowances)
          assert (value >= 0)
          assert (value <= lookupBalance owner balances)
          assert (value <= allowance)
          create this with
            name = name
            creator = creator
            totalSupply = totalSupply
            balances = (transfer owner receiver value balances)
            allowances = (setAllowance spender owner (allowance - value) allowances)

    choice Approve : ContractId ERC20
      with
        owner : Party
        spender : Party
        value : Int
      controller owner
        do
          create this with
            name = name
            creator = creator
            totalSupply = totalSupply
            balances = balances
            allowances = (setAllowance spender owner value allowances)
