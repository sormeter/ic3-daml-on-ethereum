daml 1.2 module RealEstateIssue where
import Structs
import ERC20


template RealEstateIssue
  with
    lister: Party
    operator: Party
    investors: [Party]
    listing: RealEstateListing
    erc20: ContractId ERC20
    locked: Bool
  where
    signatory lister
    observer investors

    controller lister can
      RealEstateIssue_UpdateERC20: (
          ContractId RealEstateIssue
        )
        with
          newERC20: ContractId ERC20
        do
          create this with
            erc20 = newERC20
      
      RealEstateIssue_AddInvestors: (
          ContractId RealEstateIssue
        )
        with
          newInvestors: [Party]
        do
          create this with
            investors = newInvestors ++ investors
            locked = False

    controller operator can
      RealEstateIssue_LockIssue: (
          ContractId RealEstateIssue
        )
        do
          create this with
            locked = True
    

template LockRealEstateIssue
  with
    issuer: Party
    operator: Party
    issue: ContractId RealEstateIssue
    newUsers: [Party]
  where
    signatory operator

    controller issuer can
      LockRealEstateIssue_Unlock: (
          ContractId RealEstateIssue
        )
        do
          exercise issue RealEstateIssue_AddInvestors with
            newInvestors = newUsers
    
    controller operator can
      LockRealEstateIssue_AddInvestor: (
          ContractId LockRealEstateIssue
        )
        with
          newUser: Party
        do
          create this with
            newUsers = newUser :: newUsers


template RealEstateBuyinBid
  with
    investor: Party
    issuer: Party
    realEstateListing: ContractId RealEstateIssue
    quantity: Int
  where
    signatory investor

    controller issuer can
      RealEstateBuyinBid_AcceptBuyinBid: (
          ContractId ERC20,
          ContractId RealEstateIssue,
          ContractId RealEstateShareContract
        )
        do
          rel <- fetch realEstateListing

          assert (
              rel.lister == issuer
            )

          updERC20 <- exercise rel.erc20 Transfer with
            owner = rel.lister
            receiver = investor
            value = quantity
          
          updRELIssue <- exercise realEstateListing RealEstateIssue_UpdateERC20 with
            newERC20 = updERC20

          shares <- create RealEstateShareContract with 
            listingInfo = rel.listing, ..

          return (updERC20, updRELIssue, shares)


template RealEstateShareContract
  with
    issuer: Party
    investor: Party
    listingInfo: RealEstateListing
    quantity: Int
  where
    signatory issuer, investor
