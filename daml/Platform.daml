daml 1.2 module Platform where
-- import DA.List
import Structs
-- import ExchangeRates
import RealEstateIssue
import ERC20


template Directory
  with
    operator: Party
    users: [Party]
    realEstateIssues: [ContractId RealEstateIssue]
    lockedRealEstateIssues: [ContractId LockRealEstateIssue]
    -- exchangeRates: [ContractId ExchangeRate]
  where 
    signatory operator
    observer users

    controller operator can 
      -- Operator_PublishRate: (
      --     ContractId ExchangeRate,
      --     ContractId Directory
      --   )
      --   with
      --     baseCurr: Currency
      --     quoteCurr: Currency
      --     exchRate: Decimal
      --     percMove: Decimal
      --   do
      --     rate <- create ExchangeRate with
      --       provider = operator, baseCurr, quoteCurr, exchRate, percMove, ..
      --     dir <- create this with
      --       exchangeRates = rate :: exchangeRates
      --     return (rate, dir)

      Directory_AddUser: (
          [ContractId LockRealEstateIssue],
          ContractId Directory
        )
        with
          user: Party
        do
          -- unlockToLock <- mapA (\cid -> 
          --     do
          --       lock <- exercise cid TokenIssue_LockToken
          --       cid_ <- fetch lock
          --       create LockRealEstateIssue with 
          --         issuer = cid_.creator, operator, token = lock, newUsers = [user] 
          --   ) realEstateIssues

          -- lockToLock <- mapA (\cid -> 
          --     exercise cid TokenUpdateNotice_AddInvestor with newUser = user
          --   ) lockedRealEstateIssues
            
          -- updExchRates <- mapA (\cid -> 
          --     exercise cid ExchangeRate_AddUser with user
          --   ) exchangeRates

          dir <- create this with 
            users = user :: users
            realEstateIssues = []
            lockedRealEstateIssues = []
            -- lockedRealEstateIssues = (lockToLock ++ unlockToLock)
            -- exchangeRates = updExchRates

          return ([], dir)
      
    --   Directory_AddUpdatedTokenIssue: (
    --       ContractId Directory
    --     )
    --     with
    --       updatedTokenIssue: ContractId TokenIssue
    --       notice: ContractId LockRealEstateIssue
    --     do
    --       let
    --         updLockedTokenIssues = delete notice lockedRealEstateIssues
    --       create this with
    --         realEstateIssues = updatedTokenIssue :: realEstateIssues; lockedRealEstateIssues = updLockedTokenIssues
      
    choice Directory_AddRealEstateIssue: (
        ContractId Directory
      )
      with
        issuer: Party
        issue: ContractId RealEstateIssue
      controller issuer
      do
        assert (elem issuer users)
        create this with
          realEstateIssues = issue :: realEstateIssues


template UserJoinRequest
  with
    user: Party
    operator: Party
    etherBalance: Decimal
  where
    signatory user

    controller operator can
      UserJoinRequest_Grant: (
          ContractId User,
          ContractId Directory,
          [ContractId LockRealEstateIssue]
        )
        with
          directory: ContractId Directory
        do
          dir_ <- fetch directory
          assert (notElem user dir_.users)
          newUser <- create User with ..
          (unlockToLock, updDir) <- exercise directory Directory_AddUser with ..
          return (newUser, updDir, unlockToLock)


template User
  with
    user: Party
    operator: Party
    etherBalance: Decimal
  where
    signatory user, operator

    controller user can
      nonconsuming User_ListNewOffering: (
          ContractId ERC20,
          ContractId RealEstateIssue,
          ContractId Directory
        )
        with
          directory: ContractId Directory
          listing: RealEstateListing
        do
          let outstanding = truncate (listing.fiatValueTotal / listing.chunkFiatSizes)
          dir_ <- fetch directory

          erc20Token <- create ERC20 with 
            name = listing.issueSymbol
            creator = user
            owners = dir_.users
            balances = []
            allowances = []
          
          reList <- create RealEstateIssue with
            lister = user, investors = dir_.users, erc20 = erc20Token, ..
            
          dir <- exercise directory Directory_AddRealEstateIssue with 
            issuer = user, issue = reList

          return (erc20Token, reList, dir)

      -- nonconsuming User_BuyinToToken: (
      --     ContractId TokenBuyinBid
      --   )
      --   with
      --     tokenOffer: ContractId TokenIssue
      --     quantity: Int
      --   do
      --     to_ <- fetch tokenOffer
      --     create TokenBuyinBid with investor = user, issuer = to_.issuer, ..
      

      -- nonconsuming User_UnlockToken: (
      --     ContractId TokenIssue,
      --     ContractId Directory
      --   )
      --   with
      --     directory: ContractId Directory
      --     notice: ContractId LockRealEstateIssue
      --   do
      --     newTokenIssue <- exercise notice TokenUpdateNotice_Unlock
      --     dir <- exercise directory Directory_AddUpdatedTokenIssue with
      --       updatedTokenIssue = newTokenIssue, notice
      --     return (newTokenIssue, dir)
        