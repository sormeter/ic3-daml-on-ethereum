daml 1.2 module Platform where
import DA.List
import Structs
import ExchangeRates
import RealEstateIssue
import ERC20


template Directory
  with
    operator: Party
    users: [Party]
    realEstateIssues: [ContractId RealEstateIssue]
    lockedRealEstateIssues: [ContractId LockRealEstateIssue]
    exchangeRates: [ContractId ExchangeRate]
  where 
    signatory operator
    observer users

    controller operator can 
      Operator_PublishRate: (
          ContractId ExchangeRate,
          ContractId Directory
        )
        with
          baseCurr: Currency
          quoteCurr: Currency
          exchRate: Decimal
          percMove: Decimal
        do
          rate <- create ExchangeRate with
            provider = operator, baseCurr, quoteCurr, exchRate, percMove, ..
          dir <- create this with
            exchangeRates = rate :: exchangeRates
          return (rate, dir)

      Directory_UpdateIssueID: (
          ContractId Directory
        )
        with
          oldIssueID: ContractId RealEstateIssue
          newIssueID: ContractId RealEstateIssue
        do
          create this with
            realEstateIssues = replace [oldIssueID] [newIssueID] realEstateIssues
        
      Directory_AddUser: (
          [ContractId LockRealEstateIssue],
          ContractId Directory
        )
        with
          user: Party
        do
          unlockToLock <- mapA (\cid -> 
              do
                lock <- exercise cid RealEstateIssue_LockIssue
                cid_ <- fetch lock
                create LockRealEstateIssue with 
                  issuer = cid_.lister, operator, issue = lock, newUsers = [user] 
            ) realEstateIssues

          lockToLock <- mapA (\cid -> 
              exercise cid LockRealEstateIssue_AddInvestor with newUser = user
            ) lockedRealEstateIssues
            
          updExchRates <- mapA (\cid -> 
              exercise cid ExchangeRate_AddUser with user
            ) exchangeRates

          dir <- create this with 
            users = user :: users
            realEstateIssues = []
            lockedRealEstateIssues = (lockToLock ++ unlockToLock)
            exchangeRates = updExchRates

          return ((lockToLock ++ unlockToLock), dir)
      
      Directory_AddUpdatedRealEstateIssue: (
          ContractId Directory
        )
        with
          updatedIssue: ContractId RealEstateIssue
          notice: ContractId LockRealEstateIssue
        do
          let
            updLockedIssues = delete notice lockedRealEstateIssues
          create this with
            realEstateIssues = updatedIssue :: realEstateIssues
            lockedRealEstateIssues = updLockedIssues
      
    choice Directory_AddRealEstateIssue: (
        ContractId Directory
      )
      with
        issuer: Party
        issue: ContractId RealEstateIssue
      controller issuer
      do
        assert (elem issuer users)
        create this with
          realEstateIssues = issue :: realEstateIssues
    

template UserJoinRequest
  with
    user: Party
    operator: Party
    etherBalance: Decimal
  where
    signatory user

    controller operator can
      UserJoinRequest_Grant: (
          ContractId User,
          ContractId Directory,
          [ContractId LockRealEstateIssue]
        )
        with
          directory: ContractId Directory
        do
          dir_ <- fetch directory
          assert (notElem user dir_.users)
          newUser <- create User with viewers = [], ..
          (unlockToLock, updDir) <- exercise directory Directory_AddUser with ..
          return (newUser, updDir, unlockToLock)


template User
  with
    user: Party
    operator: Party
    etherBalance: Decimal
    viewers: [Party]
  where
    signatory user, operator
    observer viewers

    controller user can
      User_AddObserver: (
          ContractId User
        )
        with
          viewer: Party
        do
          create this with
            viewers = viewer :: viewers

      nonconsuming User_ListNewOffering: (
          ContractId ERC20,
          ContractId RealEstateIssue,
          ContractId Directory
        )
        with
          directory: ContractId Directory
          listing: RealEstateListing
        do
          let supply = truncate (listing.fiatValueTotal / listing.chunkFiatSizes)
          dir_ <- fetch directory

          erc20Token <- create ERC20 with
              name = listing.issueSymbol
              issuer = user
              users = dir_.users
              totalSupply = supply
              balances = [(user, supply)]
              allowances = []
          
          reList <- create RealEstateIssue with
            lister = user
            investors = dir_.users
            erc20 = erc20Token
            locked = False
            ..
            
          dir <- exercise directory Directory_AddRealEstateIssue with 
            issuer = user, issue = reList

          return (erc20Token, reList, dir)

      nonconsuming User_BuyinToIssue: (
          ContractId RealEstateBuyinBid,
          ContractId FundsTransferPermission
        )
        with
          realEstateListing: ContractId RealEstateIssue
          quantity: Int
          selfContract: ContractId User
        do
          to_ <- fetch realEstateListing

          newBid <- create RealEstateBuyinBid with 
            investor = user, issuer = to_.lister, ..
          
          selfContract <- exercise selfContract User_AddObserver with
            viewer = to_.lister
          
          transAuth <- create FundsTransferPermission with
            sender = user, receiver = to_.lister, ..
          
          return (newBid, transAuth)
      
      User_AcceptBuyinBid: (
          ContractId ERC20,
          ContractId RealEstateIssue,
          ContractId RealEstateShareContract,
          ContractId Directory,
          ContractId User
        )
        with
          bid: ContractId RealEstateBuyinBid
          directory: ContractId Directory
          fundsTransferPermission: ContractId FundsTransferPermission
        do
          bidDeref <- fetch bid
          listingDeref <- fetch bidDeref.realEstateListing
          dirDeref <- fetch directory

          allrates <- mapA (\cid -> 
              do
                rate <- fetch cid
                return (rate.quoteCurr, cid)
            ) dirDeref.exchangeRates
          
          rate <- fetch (snd (head (filter (\t -> fst t == listingDeref.listing.currency) allrates)))

          (erc20Token, u1_realEstateListing_1, u2_Shares_1) <- 
            exercise bid RealEstateBuyinBid_AcceptBuyinBid
          
          newDir <- exercise directory Directory_UpdateIssueID with
            oldIssueID = bidDeref.realEstateListing, newIssueID = u1_realEstateListing_1
          
          let delta = ((listingDeref.listing.chunkFiatSizes * intToDecimal bidDeref.quantity) / rate.exchRate)

          seller <- create this with
            etherBalance = etherBalance + delta
          
          buyer <- exercise fundsTransferPermission FundsTransferPermission_SetNewBalance with
            newBalance = delta
          
          return (erc20Token, u1_realEstateListing_1, u2_Shares_1, newDir, seller)
    
      User_UpdateBalance: (
          ContractId User
        )
        with
          newBalance: Decimal
        do
          create this with
            etherBalance = newBalance
            viewers = []

      nonconsuming User_UnlockRealEstateIssue: (
          ContractId RealEstateIssue,
          ContractId Directory
        )
        with
          directory: ContractId Directory
          notice: ContractId LockRealEstateIssue
        do
          newIssue <- exercise notice LockRealEstateIssue_Unlock
          dir <- exercise directory Directory_AddUpdatedRealEstateIssue with
            updatedIssue = newIssue, notice
          return (newIssue, dir)
        

template FundsTransferPermission
  with
    sender: Party
    receiver: Party
    selfContract: ContractId User
  where
    signatory sender

    controller receiver can
      FundsTransferPermission_SetNewBalance: (
          ContractId User
        )
        with
          newBalance: Decimal
        do
          exercise selfContract User_UpdateBalance with ..
